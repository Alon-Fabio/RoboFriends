{"version":3,"sources":["redocers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","failed","Card","name","email","id","className","alt","src","CardList","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","hesErrorBoundary","state","hesError","error","info","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundary","connect","searchRobots","requestRobotsReducer","dispatch","event","payloud","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddlewar","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d5ceb79b.chunk.js","sourcesContent":["import {CHANGE_SEARCH_FIELD,\r\n    REQUES_ROBOTS_PENDING,\r\n    REQUES_ROBOTS_SUCCESS,\r\n    REQUES_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state, {searchField:action.payloud})\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    failed: ''\r\n}\r\n\r\nexport const requestRobotsReducer = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUES_ROBOTS_PENDING:\r\n            return Object.assign({} , state, {isPending: true})\r\n        case REQUES_ROBOTS_FAILED:\r\n            return Object.assign({} , state, {failed: action.payloud, isPending: false})\r\n        case REQUES_ROBOTS_SUCCESS:\r\n            return Object.assign({} , state, {robots: action.payloud, isPending: false})\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\n\r\nclass hesErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hesError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hesError:true})\r\n    }\r\n    render(){\r\n        if (this.state.hesError){\r\n            return <h1>Opsss.. this souldnt have happend</h1>\r\n        } \r\n            \r\n                \r\n        return this.props.children\r\n                \r\n    \r\n    }\r\n}\r\n\r\nexport default hesErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport './App.css';\r\nimport {setSearchField, requestRobotsAction} from '../actions';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobotsReducer.robots,\r\n    isPending: state.requestRobotsReducer.isPending,\r\n    failed: state.requestRobotsReducer.failed,\r\n  }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: ()=>dispatch(requestRobotsAction())\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      robots: []\r\n    }\r\n  }\r\n  \r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  render() {\r\n    // const { robots} = this.state;\r\n    const {searchField, onSearchChange, robots, isPending} = this.props\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\n    REQUES_ROBOTS_PENDING,\r\n    REQUES_ROBOTS_SUCCESS,\r\n    REQUES_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payloud:text\r\n})\r\n\r\nexport const requestRobotsAction = () => (dispatch) => {\r\n    dispatch({type: REQUES_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({type: REQUES_ROBOTS_SUCCESS, payloud: data}))\r\n      .catch(error => dispatch({type: REQUES_ROBOTS_FAILED, payloud: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUES_ROBOTS_PENDING = 'REQUES_ROBOTS_PENDING'\r\n\r\nexport const REQUES_ROBOTS_SUCCESS = 'REQUES_ROBOTS_SUCCESS'\r\n\r\nexport const REQUES_ROBOTS_FAILED = 'REQUES_ROBOTS_FAILED'\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddlewar from 'redux-thunk';\r\nimport {Provider} from 'react-redux'\r\nimport{createLogger} from 'redux-logger'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport {searchRobots, requestRobotsReducer} from './redocers'\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\n\r\n// Makes an Object from the reducers.\r\nconst rootReducer = combineReducers({searchRobots, requestRobotsReducer})\r\n\r\n// logger console logs all the actions redux makes.\r\nconst logger = createLogger()\r\n\r\n// Reduxs store, replaces the state object.\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddlewar, logger))\r\n\r\n// The provieder injects the store to the App, it can be accessed with <connect></connect>.\r\nReactDOM.render(<Provider store={store} ><App/></Provider>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}